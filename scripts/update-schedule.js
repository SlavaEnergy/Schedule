// scripts/update-schedule.js
import fs from "fs";
import path from "path";
import axios from "axios";
import { JSDOM } from "jsdom";
import { execSync } from "child_process";

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
const CONFIG = {
  BASE_URL: "https://shtpt.getcourse.ru",
  SCHEDULE_PAGE_URL: "https://shtpt.getcourse.ru/teach/control/stream/view/id/934775562",
  COOKIE: process.env.GETCOURSE_COOKIE
};

const OUTPUT_DIR = "Schedule";
if (!fs.existsSync(OUTPUT_DIR)) fs.mkdirSync(OUTPUT_DIR);

const session = axios.create({
  withCredentials: true,
  headers: {
    "User-Agent":
      "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
    Cookie: CONFIG.COOKIE
  }
});

async function downloadFile(url, dest) {
  const response = await session.get(url, { responseType: "arraybuffer" });
  fs.writeFileSync(dest, response.data);
  console.log(`‚¨áÔ∏è  –°–∫–∞—á–∞–Ω ${path.basename(dest)}`);
}

async function convertDocToPng(docPath) {
  console.log(`üß© –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é ${path.basename(docPath)}...`);
  execSync(`libreoffice --headless --convert-to png --outdir ${OUTPUT_DIR} "${docPath}"`);
}

// --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
async function updateSchedules() {
  console.log("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è–º–∏...");
  const mainPage = await session.get(CONFIG.SCHEDULE_PAGE_URL);
  const dom = new JSDOM(mainPage.data);
  const lessons = dom.window.document.querySelectorAll(".lesson-list li[data-lesson-id]");

  for (const lesson of lessons) {
    const linkEl = lesson.querySelector("a[href]");
    const titleEl = lesson.querySelector(".link.title");
    if (!linkEl || !titleEl) continue;

    const date = titleEl.textContent.trim().split(" ")[0];
    const lessonUrl = `${CONFIG.BASE_URL}${linkEl.getAttribute("href")}`;
    const pngPath = path.join(OUTPUT_DIR, `${date}.png`);

    if (fs.existsSync(pngPath)) {
      console.log(`‚è© ${date}.png —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞—é`);
      continue;
    }

    console.log(`üìÖ –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ${date}`);
    const lessonPage = await session.get(lessonUrl);
    const lessonDom = new JSDOM(lessonPage.data);
    const docLink = lessonDom.window.document.querySelector('a[href*=".doc"]');

    if (!docLink) {
      console.log(`‚ö†Ô∏è  –í —É—Ä–æ–∫–µ ${date} –Ω–µ—Ç .doc —Ñ–∞–π–ª–∞`);
      continue;
    }

    const fileUrl = docLink.href.startsWith("http")
      ? docLink.href
      : `${CONFIG.BASE_URL}${docLink.href}`;
    const docPath = path.join(OUTPUT_DIR, `${date}.doc`);

    await downloadFile(fileUrl, docPath);
    await convertDocToPng(docPath);
    console.log(`‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ${date} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!\n`);
  }
}

updateSchedules().catch((err) => {
  console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", err);
  process.exit(1);
});
